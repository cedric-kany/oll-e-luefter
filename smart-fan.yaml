# These substitutions allow the end user to override certain values
substitutions:
  name: "heizungslufter"
  friendly_name: "Heizungs Lüfter"

esphome:
  name: "${name}"
  # Friendly names are used where appropriate in Home Assistant
  friendly_name: "${friendly_name}"
  # Automatically add the mac address to the name
  # so you can use a single firmware for all devices
  name_add_mac_suffix: true

  # This will allow for (future) project identification,
  # configuration and updates.
  project:
    name: cedric.olleluefter
    version: "1.0"

# To be able to get logs from the device via serial and api.
logger:

# API is a requirement of the dashboard import.
api:

# OTA is required for Over-the-Air updating
ota:

# This should point to the public location of this yaml file.
dashboard_import:
  package_import_url: github://cedric-kany/oll-e-luefter/smart-fan.yaml
  import_full_config: false # or true

wifi:
  # Set up a wifi access point
  ap:

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device.
captive_portal:

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
#esp32_improv:
  #authorizer: none

# Sets up the improv via serial client for Wi-Fi provisioning
#improv_serial:
#  next_url: https://example.com/project-template/manual?ip={{ip_address}}&name={{device_name}}&version={{esphome_version}}

esp32:
  board: adafruit_qtpy_esp32c3
  framework:
    type: arduino

i2c:
  sda: GPIO5
  scl: GPIO6
  scan: true

sensor:
  - platform: shtcx
    temperature:
      name: Temperatur
    humidity:
      name: Luftfeuchtigkeit
    address: 0x70
    update_interval: 60s

  - platform: ntc
    sensor: resistance_sensor
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 10kOhm
    name: Heizkörper Temperatur

  - platform: resistance
    id: resistance_sensor
    sensor: source_sensor
    configuration: DOWNSTREAM
    resistor: 10kOhm

  - platform: adc
    id: source_sensor
    pin: GPIO4
    update_interval: 15s

  - platform: pulse_counter
    pin: GPIO10
    unit_of_measurement: "RPM"
    name: "Lüfter Drehzahl"
    update_interval: 15s
    filters:
      - multiply: 0.5

fan:
  - platform: speed
    output: fan_pwm
    name: Lüfter

output:
  - platform: ledc
    pin: GPIO1
    frequency: 25000Hz
    id: fan_pwm
